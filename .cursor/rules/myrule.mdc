---
alwaysApply: true
---
# AI开发规范总则

## 核心原则

### 前提：基于现有框架
必须依赖现有框架内容，不得跳过基础直接操作。

### 总纲约束：严格控制输出效率
**约束1：** 任务完成即结束，禁止多余表达
**约束2：** 禁止创建临时文件，避免token浪费

### 操作标准：三最小原则
**最简单：** 步骤最少、逻辑最直接
**最小改动：** 对现有内容调整幅度最小  
**最小代价：** 消耗资源最少

### 禁止行为：无基础创新
禁止脱离现有内容凭空创造新规则。

### 优先级声明
以上原则优先级最高，存在多种路径时按此顺序筛选。

---

## 基础操作规范

**中文表达：** 所有对话内容仅使用中文表达
**禁用终端：** 禁止使用任何终端命令
**数据库操作：** 数据库操作必须通过mcp服务

## 后端开发规范（Laravel 12）

**查阅文档：** 后端操作前必须查阅Laravel官方文档
**遵循规范：** 严格遵循Laravel官方规范和示例
**特殊说明：** 特殊场景需在代码注释中说明原因和依据

## 开发流程规范

### 前期调研
**需求推理：** 用户需求必须逐层推理，从表面需求深入分析真实意图和底层要求
**全面调查：** 新增或修改前必须全面调查相关逻辑和功能
**明确方案：** 制定明确方案后方可执行操作

### 内容评估
**梳理评估：** 操作前全面梳理评估原有内容
**优先调整：** 优先基于原有内容调整优化
**谨慎新增：** 仅在原有内容不足时方可新增
**记录关联：** 新增时详细记录与原有内容关联关系

### 错误处理
**彻底删除：** 发现错误时必须彻底删除相关内容
**确认重建：** 删除前确认影响范围，删除后重新构建

## 前端开发规范（Element Plus）

### 组件使用
**查阅文档：** 选用组件前查阅Element Plus官方文档
**规范配置：** 严格按照官方文档规范配置组件
**场景匹配：** 在对应场景下使用对应组件

### 组件扩展
**样式定制：** 二次开发前查阅官方样式定制规范
**交互逻辑：** 严格遵循组件交互逻辑，调整需注明原因
**样式标准：** 遵守官方样式标准，调整需说明原因和影响
**扩展方式：** 优先通过官方支持方式实现功能扩展

### 自定义组件
**设计一致：** 保证设计风格与Element Plus一致
**体验统一：** 保持交互体验统一，并详细记录差异

## UI设计规范

**统一风格：** 保持舒适连贯，遵循框架统一风格
**禁用自定义颜色：** 禁止添加自定义CSS颜色样式，完全依赖框架默认颜色
**专业简洁：** 以专业简洁为核心，优先体现功能性和实用性

## 接口规范

**避免冗余：** 已有明确返回方案的接口不得添加冗余JSON结构

## 命名规范约定

### 文件和目录命名
**Vue组件：** Vue组件文件使用PascalCase（如：TicketDynamicForm.vue）
**普通文件：** 普通文件和目录使用kebab-case（如：ticket-app、user-profile）
**配置文件：** 配置文件使用小写加扩展名（如：config.js、types.ts）

### 变量和函数命名
**JS变量函数：** JavaScript变量和函数使用camelCase（如：templateData、handleSubmit）
**常量：** 常量使用UPPER_SNAKE_CASE（如：API_BASE_URL、MAX_FILE_SIZE）
**组件属性：** 组件props和events使用camelCase（如：templateId、fieldChange）

### 后端命名规范
**控制器：** 控制器使用PascalCase+Controller（如：TicketsController）
**模型：** 模型使用PascalCase单数形式（如：Ticket、TicketTemplate）
**方法：** 方法使用camelCase（如：createTicket、getTemplateData）

### 数据库命名规范
**表名：** 表名使用snake_case复数形式（如：tickets、ticket_templates）
**字段名：** 字段名使用snake_case（如：ticket_name、created_at）
**外键：** 外键使用表名单数_id格式（如：user_id、template_id）

### CSS类名规范
**基础命名：** 使用kebab-case（如：ticket-form、dynamic-section）
**BEM方法：** BEM命名法用于复杂组件（如：form__input--disabled）
**语义清晰：** 避免使用缩写，保持语义清晰（如：button而非btn）

## MCP服务使用约定

### 文档查询规范
**优先使用：** 查阅技术文档时必须优先使用MCP服务获取最新资料
**Laravel文档：** Laravel框架相关问题必须通过MCP获取官方文档
**组件文档：** Element Plus组件使用前必须通过MCP查阅官方文档

### 数据库操作规范
**MCP执行：** 所有数据库查询操作必须通过MCP服务执行
**禁用终端：** 禁止使用终端直接连接数据库，必须使用MCP_DBHub
**结构查询：** 数据库结构查询使用MCP服务获取准确信息

### MCP优先级原则
**问题查询：** 遇到技术问题时优先使用MCP服务查询解决方案
**服务可用：** MCP服务可用时禁止使用其他方式获取资料
**信息准确：** MCP获取的信息为准确性最高的参考依据

---

**执行标准：** 以上所有规则均为强制性执行标准，必须严格遵循。